[[{"i":"#","p":["semantic-release: angular"]},{"l":"Hostr","p":["Rental accomodation using purely peer-to-peer technologies such as Nostr.","Read docs in full here","This repo contains","Client README","Infrastructure README","Escrow README","Accommodation NIP","Escrow NIP"]},{"l":"NIPs Utilized","p":["NIP-01: Basic protocol for event creation and subscription.","NIP-04: Encrypted direct messages for secure communication between hosts and guests. (Deprecated)","NIP-47: Private Direct Messages","NIP-05: Mapping Nostr keys to DNS-based internet identifiers.","NIP-09: Event deletion for removing listings or messages.","NIP-33: Parameterized replaceable events for creating and updating listings and bookings."]},{"l":"Getting started"}],[{"i":"#","p":["semantic-release: angular"]},{"l":"Hostr","p":["Rental accomodation using purely peer-to-peer technologies such as Nostr.","Read docs in full here","This repo contains","Client README","Infrastructure README","Escrow README","Accommodation NIP","Escrow NIP"]},{"l":"NIPs Utilized","p":["NIP-01: Basic protocol for event creation and subscription.","NIP-04: Encrypted direct messages for secure communication between hosts and guests. (Deprecated)","NIP-47: Private Direct Messages","NIP-05: Mapping Nostr keys to DNS-based internet identifiers.","NIP-09: Event deletion for removing listings or messages.","NIP-33: Parameterized replaceable events for creating and updating listings and bookings."]},{"l":"Getting started"}],[{"l":"App","p":["codecov","This is a client that displays and posts events related to short term accommodation lets over the nostr network."]},{"l":"Getting Started","p":["Install Flutter By default flutter launches in mock mode. It will not attempt to connect to relays or swap services. To connect to other environments, check the VSCode debug launcher."]},{"l":"Structure"},{"l":"NIPs Utilized","p":["NIP-01: Basic protocol for event creation and subscription.","NIP-05: Mapping Nostr keys to DNS-based internet identifiers.","NIP-09: Event deletion for removing listings or messages.","NIP-17: Encrypted direct messages for secure communication between hosts and guests.","NIP-33: Parameterized replaceable events for creating and updating listings and bookings."]},{"l":"Dependency injection and mocking","p":["Each Screen widget just handles the mapping of query and path parameters onto it's corresponding View widget. This allows for catalogging widgets while only using their TypeSafe parameters, rather than having to pass in query strings etc."]},{"l":"Improvements","p":["Swap in transaction should go straight into the contract","Escrow contract COULD encode bolt12, and then escrcow can do the swap by proving they paid a corresponding bolt11 invoice and releasing the funds to themselves. Out of scope."]},{"l":"Assets","p":["The assets directory houses images, fonts, and any other files you want to include with your application.","The assets/images directory contains resolution-aware images."]},{"l":"Localization","p":["This project generates localized messages based on arb files found in the lib/_localization directory.","To support additional languages, please visit the tutorial on Internationalizing Flutter apps"]},{"l":"Seed relay"}],[{"l":"01 login","p":["User clicks login with Nostr Connect","E.g. nostr connect hyperlink nostrconnect://pubkey?relay=${encodeURIComponent(wss://relay.hostr.io)}metadata=${encodeURIComponent(JSON.stringify({name: Hostr}))}"]}],[{"l":"Nwc auth","p":["https://github.com/benthecarman/nips/blob/nostr-wallet-connect-connect/67.md"]}],[{"l":"Compile Swap ABIs","p":["We use Boltz to swap into and out of escrow contracts on Rootstock's EVM L2.","To facilitate this, we require the ABIs that Boltz makes available for their swaps, and the ABIs used for the escrow contract.","If we import the ABIs, we can use web3dart package and it's accompanying class builder to easily interact with any EVM compatible L2. We only need to run this if there is a change in the ABIs, since the compiled dart is committed in the /app folder."]}],[{"l":"List cubit","p":["A list cubit listens to a filter and starts a subscription stream instance with a specific filter. Emitting from the filter cubit will trigger the list state to reset. Use a postFilter cubit to emit a predicate that filters fetched results based on parameters that can't be filtered for via Nostr requests directly. A sort cubit determines how the results are ordered.","It has the following methods:","Load new","Load next","Load all","The class emits:"]},{"i":"messaging-cubit-hydrated","l":"Messaging cubit (Hydrated)","p":["The messaging cubit is responsible for loading and storing all kind 14 private and encrypted DMs. Since messages include reservation offers made & received, it's vital that this stays up-to-date and is synched upon app login. Since private DMs are sent using a random pubkey for added privacy, it is not possible to search for messages from/to our OWN pubkey to load relevant messages. Nostr NIP 17 recomemends giftwrapping the message and sending it from randomized keys to us and to the real receiver.","Before a user can interact in the inbox, the message stream must have received EOSE for all connected relays using filter","This stream, when completed, will hold a state of all messages ever received."]},{"l":"Search"},{"l":"Reservation Checker Cubit","p":["The reservation checker cubit can listen to the search list results, and query corresponding reservations as needed.","For each search result which matches the postResultFilter filter we need to fetch reservations to check availability. This is difficult, because one listing could have hundreds of reservations, or many listings could have no reservations. In the first iteration, we can just query each listing individually.","We could potentially load multiple listing's reservations using one NostrFilter by inputting multiple d tags.","For each result in our results list, we need to query all reservations as there is no way to filter based on date range.","Once each synch event fires, indicating that reservations have completely loaded for a set of listings, we need to update the search postResultFilter predicate to exclude those items, or reorder the list."]},{"l":"Reviews","p":["Reviews use Nostr kind 14. They can include tags such as tags: [['cleanliness', 1], ['checkIn', 0.6]]. The content can be the comment that the guest wishes to leave.","The review event should include a tag with commitment pre-image, that only the owner of the reservation knows,"]}],[{"l":"Search"}],[{"l":"State persistence"},{"l":"Hydrated cubits","p":["Hydrated blocs are used to persist state between app relaunched, preventing re-sync upon every usage. Hydrated blocs must be cleared on logout."]}],[{"i":"swap-in-reverse-submarine-swap","l":"Swap in (Reverse Submarine Swap)","p":["A swap-in (reverse submarine swap) only happens when we are bridging to an EVM layer for escrow services. Once we are swapped in, the keys of our app (AKA the nsec) is the key for spending the funds into the escrow, and sweeping funds out of escrow upon completion."]}],[{"l":"Swap manager"},{"i":"swap-manager-hydrated","l":"Swap Manager (Hydrated)","p":["The swap manager is a global service that can run independently from UI (may need to be run in background) when possible.","Swap manager should be a hydrated cubit, such that it remembers the latest scanned part of the chain.","We need to make sure that if two instances of swap manager are running, they do not broadcast competing transactions. If they deterministically create the same transactions, should these be rejected by network and don't risk double-paying fees?","The swap manager might then be consumed like this"]}],[{"i":"swap-out-submarine-swap","l":"Swap out (Submarine Swap)","p":["A swap-out occurs after an escrow has paid the seller out on the EVM chain. The funds now need to be swept back to lightning."]}],[{"l":"Escrow","p":["We deposit using our EVM balance, usually after a swap in."]}],[{"l":"Payment","p":["A payment can be either a Bolt11 invoice, Bolt12 offer, LNURL string, Lightning Address, Zap, or npub. Unless a fixed user-requested amount has already been set, the flow should be as follows:","Payments requests, triggered by components in the app, should queue until they are next to be processed. Edge case."]},{"l":"Payments for swaps","p":["When we swap funds from lightning into EVM balance, the preimage from the swap invoice we paid is used to claw back the funds if something goes wrong. We also generate this preimage, so we must store this safely.","When we swap from EVM to lightning, we don't need receipt from lightning that payment was made. As we can just reclaim our EVM balance after a timeout if it has not been claimed. Movement of the EVM funds indicate success or failure."]},{"i":"payments-manager--ephemeral","l":"Payments Manager / Ephemeral","p":["Consume payment requests visually"]}],[{"l":"UI"},{"l":"Shared","p":["Accept","Attempt to fetch zaps to prove payment","Attempt to use EVM to check if money in lockup","Attempt to use lookup_invoice to check if invoices attached to reservation_requests have been paid","Calendar preloaded with unavailable dates","Can generate expiring invoice? Attach to listing","Can use NWC to generate expiring invoice.","Change","Combines with reservation list cubit where tag commit_hash is equal to first messages commit_hash tag","Conversation page","Counterparty name and avatar","Don't require upfront payment? Sends back signed reservation with commit_hash of buyers request","Edit page","Else display the message plaintext","Fetch reservation which references the anchor of this conversation.","Fetches each message in the conversation and unwraps/parses if necessary","For each item in the conversation","Header","Host","If guest mode:","If host","If host mode:","If null, fetch most recent reservation_request of this conversation anchor. \"Alex has requested to stay 3 night, Jan 3 - 6, for 60k sats\" or \"You offered to host Alex for 3 nights, Jan 3- 6, for 60k sats\" Accept (Change) - can change price if allowBarter is true, can change dates if counterparty is host.","If of message type:","If of reservation type:","If stay is in future: \"Alex is booked to be hosted by you Jan 3 - Jan 6\"","If wraps a reservation request display the offer widget","Image, name, description, NIP05, Zap button","Last message was a reservation request: 'Alex requested a 2 night stay'","List item","List of current in-flight payments","List of trusted escrow providers","Listing page","Look for reservation with commit_hash of reservation request, if exists, add \"booking confirmed\" icon to chat.","Messaging page","Profile page","Require upfront payment?","Reservation can be made instantly and for zero cost to block dates","Reserve button only active once all reservations are fetched and validated","Reviews and ratings, reservations, description, pricing","Show \"booking confirmed\" widget.","Show calendar by default","Show profile of counterparty","Shows current wallet connection, allows user to reconnect if required","Shows list of messages grouped by pubkey:a, identifies the conversation by user and reservation request anchor","Text of incoming or outgoing message, replaced with italic text if:","Wallet Page"]}],[{"l":"Getting started"}],[{"l":"Infrastructure"},{"l":"Getting started","p":["You will need to have your domain registar use the Google Cloud DNS nameservers. After applying the Terraform config, you can go to the Google Cloud Console under Networks services > Cloud DNS. Find your domain name and get the DNS nameservers. Go to your domain registar and use all of the DNS nameservers (under the NS record like ns-cloud-b1.googledomains.com.)."]}]]